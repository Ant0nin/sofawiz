#!/bin/sh

progname=$(basename $0)
progdir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
subcommand=$1

sub_help() {
	echo 'List of existing subcommands:'
	echo '   genclass <dest_folder> <namespace> "classname<T...>"'
}

sub_genclass() {
	fullclassname=$1
	componenttype=$2
	motherclass=$3
	mkdir -p "${fullclassname%/*}"
	classname=$(basename $fullclassname)

	#Generate the .h class file
	header_file="$fullclassname"".h"
	touch $header_file
	cat "$progdir""/templates/sofa_licence" > $header_file
	cat "$progdir""/templates/component_class.h" > $header_file
	sed -i "s/_COMPONENTNAME_/\U""$classname""/g" $header_file
	sed -i "s/_COMPONENTTYPE_/\U""$componenttype""/g" $header_file
	sed -i "s/_MotherClass_/""$motherclass""/g" $header_file
	sed -i "s/_componenttype_/""$componenttype""/g" $header_file
	sed -i "s/_ComponentName_/""$classname""/g" $header_file

	#Generate the .cpp class fil
	cpp_file="$fullclassname"".cpp"
	touch $cpp_file
	cat "$progdir""/templates/sofa_licence" > $cpp_file
	cat "$progdir""/templates/component_class.cpp" > $cpp_file
	sed -i "s/_componenttype_/""$componenttype""/g" $cpp_file
	sed -i "s/_ComponentName_/""$classname""/g" $cpp_file
	sed -i "s/_ComponentNameClass/""$classname""/g" $cpp_file

	#TODO: Add entry in the CMakeLists.txt of the current plugin
}

case $subcommand in
	"-h" | "--help")
		sub_help $@
		;;
	*)
		shift
		sub_$subcommand $@
       		if [ $? = 127 ]; then
       	     		echo "Error: '$subcommand' is not a known subcommand." >&2
       	     		echo "       Run '$progname --help' for a list of known subcommands." >&2
       	     		exit 1
       	 	fi
       	 	;;
esac
